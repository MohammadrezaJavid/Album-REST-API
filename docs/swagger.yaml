basePath: /api
definitions:
  album_swagger_models.User:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.Album:
    properties:
      artist:
        type: string
      id:
        type: string
      price:
        type: number
      title:
        type: string
    type: object
  models.BaseAuth:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.Result:
    properties:
      email:
        type: string
      userid:
        type: integer
      username:
        type: string
    type: object
  models.Token:
    properties:
      token:
        type: string
    type: object
host: localhost:8070
info:
  contact:
    email: api@swagger.io
    name: API Support
    url: http://www.swagger.io/api
  description: This is a sample server for save Albums in mysql database
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Go + Gin Album rest API Service
  version: "1.0"
paths:
  /jwt/albums:
    get:
      description: Retrieve all albums from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Album'
      security:
      - BearerAuth: []
      summary: Get all Albums from database
      tags:
      - CRUD Album
    post:
      description: Post an Album and saved to database
      parameters:
      - description: Album JSON
        in: body
        name: album
        required: true
        schema:
          $ref: '#/definitions/models.Album'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Album'
      security:
      - BearerAuth: []
      summary: Post an Album
      tags:
      - CRUD Album
    put:
      description: Retrieve an Album by id from database, update it and save to database
      parameters:
      - description: Album JSON
        in: body
        name: album
        required: true
        schema:
          $ref: '#/definitions/models.Album'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Album'
      security:
      - BearerAuth: []
      summary: Update one Album from database
      tags:
      - CRUD Album
  /jwt/albums/{id}:
    delete:
      description: Delete an Album by id from database.
      parameters:
      - description: Album id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete one Album from database
      tags:
      - CRUD Album
    get:
      description: Retrieve an Album by id from the database
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Album'
      security:
      - BearerAuth: []
      summary: Get one Album from database
      tags:
      - CRUD Album
  /token:
    post:
      description: Create one jwt token
      parameters:
      - description: baseAuth JSON
        in: body
        name: baseAuth
        required: true
        schema:
          $ref: '#/definitions/models.BaseAuth'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Token'
      summary: Generate one token
      tags:
      - Auth
  /user/register:
    post:
      description: Get info of one user and saved to database
      parameters:
      - description: User JSON
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/album_swagger_models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Result'
      summary: Register one user
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
